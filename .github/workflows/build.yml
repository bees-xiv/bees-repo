name: Build

on:
  schedule:
    - cron: "20 */6 * * *"
  # push:
  #   branches:
  #     - main
  workflow_dispatch:

concurrency:
  group: "hourly-workflow"
  cancel-in-progress: true

env:
  GH_TOKEN: ${{ github.token }}
  skip_build:

jobs:
  run-windows:
    runs-on: windows-latest
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
      - name: Checkout bees-build repository
        uses: actions/checkout@v4
        with:
          repository: bees-xiv/bees-build
          token: ${{ secrets.BEES_BUILD_PAT }}
          path: "bees-build"
      - name: Set up Bun
        uses: oven-sh/setup-bun@v2
        with:
          bun-version: latest
      - name: Check if rebuild is needed
        run: |
          bun bees-build/build.ts --check-only
          if ($LASTEXITCODE -eq 1) {
            echo "skip_build=true" >> $env:GITHUB_ENV
          }
          exit 0
      - name: Setup .NET
        if: env.skip_build != 'true'
        uses: actions/setup-dotnet@v1
        with:
          dotnet-version: 9.0.x
      - name: Download Dalamud
        if: env.skip_build != 'true'
        run: |
          # Invoke-WebRequest -Uri https://goatcorp.github.io/dalamud-distrib/stg/latest.zip -OutFile latest.zip
          Invoke-WebRequest -Uri https://goatcorp.github.io/dalamud-distrib/latest.zip -OutFile latest.zip
          Expand-Archive -Force latest.zip "$env:AppData\XIVLauncher\addon\Hooks\dev"
      - name: Run build script
        if: env.skip_build != 'true'
        run: bun bees-build/build.ts
      - name: Commit changes to plugins.json and repo.json
        if: env.skip_build != 'true'
        run: |
          git config user.name "Github Actions"
          git config user.email "actions@github.com"
          git add ./plugins.json ./repo.json
          git commit -m "Update plugins.json and repo.json"
          git push origin main
      - name: Clean up old releases and create new release
        if: env.skip_build != 'true'
        run: |
          $oldReleases = gh release list --repo ${{ github.repository }} --json tagName --jq '.[].tagName'

          foreach ($release in $oldReleases) {
            gh release delete $release --repo ${{ github.repository }} --yes
          }

          gh release create "v$(date +'%Y.%m.%d.%H%M%S')" (Get-Item .\bees-build-dist\*) --title "New Release" --notes "Automated release from GitHub Actions"
